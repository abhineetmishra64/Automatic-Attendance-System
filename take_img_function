def clear():
  txt.delete(0, 'end')
  res=""
  message.configure(text = res)
  
def clear2():
    txt2.delete(0 , 'end')
    res = ""
    message.configure(text= res)
    
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
      pass
      
    try:
      import unicodedata
      unicodedata.numeric(s)
      return True
    except (TypeError, ValueError):
        pass    
    return False






def TakeImage():
  Id=(txt.get())
  name=(txt2.get())
  if(is_number(Id) and name.isalpha()):
    cam = cv2.VideoCapture(0)
    harcascadePath = "haarcascade_frontalface_default.xml"
    detector=cv2.CascadeClassifier(harcascadePath)
    sampleNum=0
    while(true):
      ret, img = cam.read()
      gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
      faces = detector.detectMultiScale(gray,1.3,5)
      for (x,y,w,h) in faces:
        cv2.rectangle(img ,(x,y),(x+w,y+h),(255,0,0),2)
        sampleNum=sampleNum+1
        cv2.imwrite("TrainingImage\ " +name "," +Id + '.' + str(sampleNum) + ".jpg", gray[y:y+h,x:x+w])
        cv2.imshow('frame' ,img)
      if cv2.waitKey(100) & 0xFF == ord('q'):
        break
      elif sampleNum>60:
        break
    cam.release()
    cv2.destroyAllWindows()
    res = "images saved for ID:"+Id +"name :"+ name
    row = [Id , name]
    with open('studentdetsils\studentdetils.csv','a+') as csvFile:
      writer = csv.writer(csvFile)
      writer.writerow(row)
    csvFile.close()
    message.configure(text =res)
else:
    if(is_number(Id)):
      res = "enter alphabetical name"
      message.configure(text = res)
    if(name.isalpha()):
      res= "enter numeric id"
      message.configure(text= res)
